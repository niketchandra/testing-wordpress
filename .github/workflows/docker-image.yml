name: opa_audit_report
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      SubscriptionID:
        type: string
        required: true
      AKS_RESOURCE_GROUP:
        type: string
        required: true
      CLUSTER_NAME:
        type: string
        required: true
      ENV_Name:
        type: string    
        required: true
    
    

    
    

jobs:
  azure-login:
    runs-on: [ Linux ]
    steps:
      - name: run script
        run: |
            CURRENTDATE=`date +"%Y-%m-%d %T"`

            echo $CURRENTDATE

            echo "testing script"


            echo "${{ secrets.AZ_ESCO_CLIENT_ID }}"

            cluster_count=`grep -c 'cluster_rg'  docker-baseimage/ubuntu/opa_audit/cluster-config.yaml`
            echo "cluster count" $cluster_count

            cluster_rg=`grep -o 'cluster_rg.*'  docker-baseimage/ubuntu/opa_audit/cluster-config.yaml | cut -f2- -d:`
            #echo $cluster_rg[]
            declare -a rg=($cluster_rg)


            cluster_name=`grep -o 'cluster_name.*'  docker-baseimage/ubuntu/opa_audit/cluster-config.yaml | cut -f2- -d:`
            #echo $cluster_name[]

            subscription=`grep -o 'cluster_subscription.*'  docker-baseimage/ubuntu/opa_audit/cluster-config.yaml | cut -f2- -d:`
            #echo $subscription[]


            declare -a name=($cluster_name)
            declare -a sub=($subscription)

            #echo ${name[@]}

            echo "Azure login..."
                  az login --service-principal --username ${{ secrets.AZ_ESCO_CLIENT_ID }} --password ${{ secrets.AZ_ESCO_CLIENT_SECRET }} --tenant ${{ secrets.AZ_ESCO_TENANT_ID }}
            for(( index=0; index < $cluster_count; index++ ))
            do
                echo "${index}" "${name[$index]}" "-->" "${rg[$index]} subscription "${sub[$index]}"
#                az account set --subscription "${sub[$index]}"
#                az aks get-credentials --resource-group ${rg[$index]} --name ${name[$index]} --admin

#                az logout
#            OPA_CONSTRAINT_JSON_LIST= `kubectl get ConstraintTemplate -o json && true, returnStdout:true`
#            if [ $OPA_CONSTRAINT_JSON_LIST == "" && $OPA_CONSTRAINT_JSON_LIST == null ]
#            then
#                    echo "OPA gatekeeper is not deployed or there are No ConstraintTemplate deployed in cluster ${name[$index]}"
#                
#                else
#                  echo "commands need to run regarding kubectl"
#            fi
            done

        env: 
          CLUSTER_SUBSCRIPTION: ${{ secrets.cluster_subscription }}
          CLIENT_ID: ${{ secrets.AZ_ESCO_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.AZ_ESCO_CLIENT_SECRET }}
          TENANT_ID: ${{ secrets.AZ_ESCO_TENANT_ID }}
